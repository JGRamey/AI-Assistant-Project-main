import requests
import time
from utils import log_audit, send_message, store_shared_data, get_shared_data
from config_manager import get_config


def handle_code_request(data, user_id):
    try:
        task = data.get('task')
        task_id = data.get('task_id', f"code_{int(time.time())}")
        response = {"status": "success", "result": {}, "task_id": task_id}

        if task == "generate_rust":
            spec = data.get("spec", "default_rust_program")
            response["result"]["code"] = f"""
fn main() {{
    println!("Rust code for {spec}");
}}
            """

        elif task == "generate_python":
            spec = data.get("spec", "default_python_program")
            response["result"]["code"] = f"""
def main():
    print("Python code for {spec}")
            """

        elif task == "generate_solidity":
            spec = data.get("spec", "default_contract")
            response["result"]["code"] = f"""
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract {spec.replace(' ', '_')} {{
    function execute() public pure returns (string memory) {{
        return "Generated by AI for {spec}";
    }}
}}
            """
            message_body = {"code": response["result"], "task_id": task_id}
            send_message(message_body, "smart_contract_ai_agent", user_id)

        elif task == "grok_suggest":
            code = data.get("code", "")
            headers = {'Authorization': f'Bearer {get_config("GROK_API_KEY")}'}
            grok_url = "https://api.x.ai/grok/code_suggest"
            grok_data = {"code": code, "user_id": user_id}
            grok_response = requests.post(
                grok_url,
                json=grok_data,
                headers=headers,
                timeout=10
            )
            grok_response.raise_for_status()
            suggestions = grok_response.json().get("suggestions", [])
            response["result"]["suggestions"] = suggestions

        elif task == "save_session":
            session = data.get("session", {})
            store_shared_data(f'coding_session_{task_id}', session, user_id)
            response["result"] = {"saved": True}

        elif task == "load_session":
            session_id = data.get("session_id", "")
            session = get_shared_data(f'coding_session_{session_id}', user_id)
            response["result"] = session or {}

        store_shared_data(f'coding_{task_id}', response["result"], user_id)
        if task in ["generate_rust", "generate_python", "generate_solidity"]:
            message_body = {"code": response["result"], "task_id": task_id}
            send_message(message_body, "smart_contract_ai_agent", user_id)

        log_audit(user_id, f"code_{task}", response)
        return response
    except Exception as e:
        log_audit(user_id, "code_task", {"error": str(e)})
        return {"status": "error", "result": str(e)}
